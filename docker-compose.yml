version: '3.7'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

services:
  nginx:
    build:
      context: tools/docker
      dockerfile: nginx/Dockerfile
      args:
        - APP_CODE_PATH=${APP_CODE_PATH_CONTAINER}
        - APP_GROUP=${APP_GROUP}
        - APP_GROUP_ID=${APP_GROUP_ID}
        - APP_USER=${APP_USER}
        - APP_USER_ID=${APP_USER_ID}
        - TZ=${TIMEZONE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    networks:
      backend:
        aliases:
          - ${APP_HOST}

  php-fpm:
    build:
      context: tools/docker
      dockerfile: php-fpm/Dockerfile
      args:
        - APP_CODE_PATH=${APP_CODE_PATH_CONTAINER}
        - APP_GROUP=${APP_GROUP}
        - APP_GROUP_ID=${APP_GROUP_ID}
        - APP_USER=${APP_USER}
        - APP_USER_ID=${APP_USER_ID}
        - TARGET_PHP_VERSION=${PHP_VERSION}
        - TZ=${TIMEZONE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    networks:
      - backend

  database:
    image: mariadb:10.4
    command:
      - '--ignore-db-dir=lost+found'
      - '--max_allowed_packet=4M'
    environment:
      - MYSQL_DATABASE=${DB_MAGENTO_DATABASE}
      - MYSQL_USER=${DB_MAGENTO_USER}
      - MYSQL_PASSWORD=${DB_MAGENTO_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:7.7.1
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - discovery.type=single-node
    networks:
      - backend

  redis-cache:
    image: redis:5
    # 1GB; evict any least recently used key even if they don't have a TTL
    command: redis-server --maxmemory 1073742000 --maxmemory-policy allkeys-lru --save 3600 1 --save 300 100 --save 60 10000
    networks:
      - backend

  redis-session:
    image: redis:5
    # 1GB; evict key that would expire soonest
    command: redis-server --maxmemory 1073742000 --maxmemory-policy volatile-ttl --save 3600 1 --save 300 100 --save 60 10000
    networks:
      - backend

  varnish:
    image: varnish:6
    environment:
      VARNISH_SIZE: 1024M
    links:
      - nginx:nginx
    volumes:
      - ./tools/docker/varnish/default.vcl:/etc/varnish/default.vcl:ro
      - type: tmpfs
        target: /var/lib/varnish:exec
        tmpfs:
          size: "100000"
    networks:
      - backend

  tls-offload:
    build:
      context: tools/docker
      dockerfile: tls-offload/Dockerfile
      args:
        - APP_CODE_PATH=${APP_CODE_PATH_CONTAINER}
        - APP_GROUP=${APP_GROUP}
        - APP_GROUP_ID=${APP_GROUP_ID}
        - APP_USER=${APP_USER}
        - APP_USER_ID=${APP_USER_ID}
        - TZ=${TIMEZONE}
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    networks:
      - backend

  workspace:
    build:
      context: tools/docker
      dockerfile: workspace/Dockerfile
      args:
        - APP_CODE_PATH=${APP_CODE_PATH_CONTAINER}
        - APP_GROUP=${APP_GROUP}
        - APP_GROUP_ID=${APP_GROUP_ID}
        - APP_USER=${APP_USER}
        - APP_USER_ID=${APP_USER_ID}
        - TARGET_PHP_VERSION=${PHP_VERSION}
        - TZ=${TIMEZONE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    ports:
      - "${WORKSPACE_HOST_SSH_PORT}:22"
    networks:
      - backend
